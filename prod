#!/usr/bin/env python
import os
import subprocess
import math
import shutil
import hashlib

BIN = "./node_modules/.bin"


def human(size):
    size = abs(size)
    if (size==0):
        return "0B"
    units = ['B','KiB','MiB','GiB','TiB','PiB','EiB','ZiB','YiB']
    p = math.floor(math.log(size, 2)/10)
    return "%.2f%s" % (size/math.pow(1024,p),units[int(p)])


def nb(binary, *args):
    ca = [os.path.join(BIN, binary)]
    for a in args:
        ca.extend(a)
    return subprocess.check_output(ca)


def get_vendors(flag):
    vout = subprocess.check_output("./scripts/vendor").split()
    args = []
    for i in vout:
        args.extend([flag, i])
    return args


def mkdirs(p):
    try:
        os.makedirs(p)
    except OSError:
        pass


def uglify(p):
    pre = os.stat(p)
    nb("uglifyjs", ["-o", p, p])
    post = os.stat(p)
    print "\t uglify", human(pre.st_size), "->", human(post.st_size)


def cssmin(p):
    pre = os.stat(p)
    out = nb("cssmin", [p])
    file(p, "w").write(out)
    print "\t cssmin", human(pre.st_size), "->", human(len(out))


def vendor():
    dst = "./build_prod/static/vendor.js"
    print dst
    nb("browserify", get_vendors("-r"), ["-o", dst])
    uglify(dst)


def app():
    dst = "./build_prod/static/app.js"
    print dst
    nb("babel", ["./src/js", "-d", ".prodcache"])
    nb(
        "browserify",
        get_vendors("-x"),
        [
            "-o", dst,
            ".prodcache/binvis.react.js"
        ]
    )
    uglify(dst)


def styles(name):
    dst = "./build_prod/static/%s.css"%name
    print dst
    nb("lessc", ["./src/css/%s.less"%name, dst])
    cssmin(dst)

def sync(p):
    src = "./src/" + p
    dst = "./build_prod/" + p
    print dst
    subprocess.check_output(["rsync", "-r", src, dst])


def copy():
    sync("fonts/")
    sync("examples/")
    sync("index.html")


def md5(fname):
    hash = hashlib.md5()
    with open(fname, "rb") as f:
        for chunk in iter(lambda: f.read(4096), b""):
            hash.update(chunk)
    return hash.hexdigest()


def tag():
    print "Tagging..."
    base = "./build_prod/static"
    trans = []
    for f in os.listdir(base):
        src = os.path.join(base, f)
        stem, ext = os.path.splitext(f)
        newname = "%s-%s%s"%(stem, md5(src), ext)
        os.rename(src, os.path.join(base, newname))
        trans.append([f, newname])
        print "\t", f, "->", newname

    tmpl = open("./build_prod/index.html").read()
    for old, new in trans:
        tmpl = tmpl.replace(old, new)
    f = open("./build_prod/index.html", "w").write(tmpl)


if __name__ == "__main__":
    shutil.rmtree("./build_prod")
    mkdirs("./build_prod/static/")
    vendor()
    app()
    styles("app")
    styles("vendor")
    copy()
    tag()
